@model SaphirCongesCore.Models.EmployeQuota
@using SaphirCongesCore.Utils
@using Microsoft.AspNet.Identity
@{
    ViewBag.Title = "Quota de congés";
}
@section calendar {
    <script src="~/Scripts/Chart.js"></script>
}

<h2>@ViewBag.Message</h2>
<hr />
<div>
    @{
        var Day1 = new DateTime(DateTime.Now.Year, 1, 1);
        var Day2 = new DateTime(DateTime.Now.Year, 12, 31);
        <h4> Période de congés à partir du @Day1.ToString("td/MM/yyyy") jusqu'au @Day2.ToString("td/MM/yyyy") de <strong>@ViewBag.Username</strong></h4>
    }
   
        <dl class="dl-horizontal">
            <dt>
                Solde total
            </dt>
            <dd>
                @ViewBag.Entitlement jours
            </dd>
            <dt>
                Congés pris
            </dt>
            <dd>
                @ViewBag.CongesPris jours
            </dd>
            <dt>
                Pris cette année
            </dt>
            <dd>
                @ViewBag.CongesPrisThisYear jours
            </dd>
            <dt>
                Restant cette année
            </dt>
            <dd>
                @ViewBag.Restant jours
            </dd>
        </dl>
</div>


<div>
    <div class="canvas-holder col-md-6">
        <h5>Total des congés pris:</h5>
        <canvas id="chart1" width="300" height="300" />
    </div>
    <div class="canvas-holder col-md-6" style="float:left">
        <h5>Congés pris cette année:</h5>
        <canvas id="chart2" width="300" height="300" />
    </div>
</div>
<script>

      var pieData = [

        @foreach (var grp in Utils.TypesCongesPris(ViewBag.Username))
    {
            @Html.Raw("{value: " + grp.Value + ", color: '" + Utils.GetCongesTypeColor(grp.Key) + "',highlight: '" + Utils.GetCongesTypeColor(grp.Key)+"',label: '" + grp.Key + "'},")
    }

    ];
    function LightenDarkenColor(col, amt) {

        var usePound = false;

        if (col[0] == "#") {
            col = col.slice(1);
            usePound = true;
        }

        var num = parseInt(col, 16);

        var r = (num >> 16) + amt;

        if (r > 255) r = 255;
        else if (r < 0) r = 0;

        var b = ((num >> 8) & 0x00FF) + amt;

        if (b > 255) b = 255;
        else if (b < 0) b = 0;

        var g = (num & 0x0000FF) + amt;

        if (g > 255) g = 255;
        else if (g < 0) g = 0;

        return (usePound ? "#" : "") + (g | (b << 8) | (r << 16)).toString(16);

    }

    var pieData2 = [

       @foreach (var grp2 in Utils.TypesCongesPrisInYear(ViewBag.Username, DateTime.Now.Year))
    {

            @Html.Raw("{value: " + grp2.Value + ", color: '" + Utils.GetCongesTypeColor(grp2.Key) + "',highlight: '" + Utils.GetCongesTypeColor(grp2.Key)+"',label: '" + grp2.Key + "'},")
    }

          @Html.Raw("{value: " + ViewBag.Restant + ", color: '" + "green" + "',highlight: '" + "green" + "',label: '" + "Restant" + "'},")

    ];

    window.onload = function () {
        var ctx = document.getElementById("chart1").getContext("2d");
        window.myPie = new Chart(ctx).Pie(pieData);
        var ctx2 = document.getElementById("chart2").getContext("2d");
        window.myPie = new Chart(ctx2).Pie(pieData2);
    };

</script>


